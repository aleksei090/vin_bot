import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')
telegram_token = os.getenv('TELEGRAM_TOKEN')

openai.api_key = openai_api_key

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ VIN
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞", callback_data='upload_photo')],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ VIN-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data='enter_vin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ VIN-–∫–æ–¥?\n"
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'upload_photo':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å VIN-–∫–æ–¥–æ–º.")
    elif query.data == 'enter_vin':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ VIN-–∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ
async def handle_text(update: Update, context):
    vin_code = update.message.text.strip().upper()
    logger.info(f"VIN-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {vin_code}")

    if len(vin_code) == 17:
        car_info = await asyncio.to_thread(get_car_info_by_vin, vin_code)
        if car_info:
            context.user_data['vin_code'] = vin_code
            await update.message.reply_text(
                f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info['make']} {car_info['model']}, {car_info['year']}, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è {car_info['engine_volume']} –ª. –í–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ.")
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ VIN –∏ –∑–∞–ø—Ä–æ—Å—É
async def process_request(update: Update, context):
    vin_code = context.user_data.get('vin_code', None)
    if vin_code:
        query = update.message.text.lower()
        if "—Ñ–∏–ª—å—Ç—Ä" in query:
            part_type = "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä"
            await update.message.reply_text(f"–ò—â–µ–º {part_type} –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å VIN {vin_code}...")

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
            parts = await search_parts(vin_code, part_type)

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π
            if parts:
                keyboard = [[InlineKeyboardButton(f"{part['name']} - {part['price']} —Ä—É–±.", callback_data=part['article'])] for part in parts]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å:", reply_markup=reply_markup)
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")

# –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø—á–∞—Å—Ç–∏
async def select_part(update: Update, context):
    query = update.callback_query
    article = query.data
    context.user_data['selected_part'] = article
    await query.answer()
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø—á–∞—Å—Ç—å —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {article}. –ú—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–∞—à –≤—ã–±–æ—Ä.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ
def get_car_info_by_vin(vin_code):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ
    return {
        "make": "Infiniti",
        "model": "QX56",
        "year": 2004,
        "engine_volume": 5.6
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
async def search_parts(vin_code, part_type):
    # –≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API, –≥–¥–µ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—á–∞—Å—Ç–µ–π
    return [
        {"name": "–î–µ—à–µ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä", "price": "500", "article": "12345"},
        {"name": "–°—Ä–µ–¥–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä 1", "price": "1500", "article": "12346"},
        {"name": "–°—Ä–µ–¥–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä 2", "price": "2000", "article": "12347"},
        {"name": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä", "price": "3500", "article": "12348"}
    ]

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(telegram_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(select_part, pattern=r'\d+'))  # –î–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_request))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()
