import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
import openai
from dotenv import load_dotenv
import pytesseract
from PIL import Image

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')  # OpenAI API-–∫–ª—é—á
telegram_token = os.getenv('TELEGRAM_TOKEN')  # Telegram API-–∫–ª—é—á

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = openai_api_key

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞", callback_data='upload_photo')],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ VIN-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data='enter_vin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏—Ä –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤!\n\nüîß –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞ –∏–ª–∏ ‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.\n"
        "–ú—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—á–∞—Å—Ç–µ–π.\n\n–ö–∞–∫ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –Ω–∞—á–∞—Ç—å? üòä",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'upload_photo':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å VIN-–∫–æ–¥–æ–º.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    elif query.data == 'enter_vin':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ VIN-–∫–æ–¥–∞
async def handle_text(update: Update, context):
    vin_code = update.message.text.strip().upper()
    logger.info(f"VIN-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {vin_code}")

    if len(vin_code) == 17:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã VIN-–∫–æ–¥–∞
        await update.message.reply_text(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è VIN: {vin_code}")

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        car_info = await asyncio.to_thread(ask_chatgpt_for_car_info, vin_code)

        if car_info:
            await update.message.reply_text(f"–ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}. –í–µ—Ä–Ω–æ –ª–∏ —ç—Ç–æ? (–¥–∞/–Ω–µ—Ç)")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞/–Ω–µ—Ç)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text(f"–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥: {vin_code}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photo(update: Update, context):
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"photos/{photo_file.file_id}.jpg"
    os.makedirs('photos', exist_ok=True)
    await photo_file.download_to_drive(photo_path)
    logger.info(f"–§–æ—Ç–æ VIN-–∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    vin_code = await asyncio.to_thread(extract_vin_from_photo, photo_path)

    if vin_code:
        await update.message.reply_text(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω VIN-–∫–æ–¥: {vin_code}. –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        car_info = await asyncio.to_thread(ask_chatgpt_for_car_info, vin_code)
        if car_info:
            await update.message.reply_text(f"–ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}. –í–µ—Ä–Ω–æ –ª–∏ —ç—Ç–æ? (–¥–∞/–Ω–µ—Ç)")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
def ask_chatgpt_for_car_info(vin_code):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∑–∞–ø—á–∞—Å—Ç—è–º."},
                {"role": "user", "content": f"–ü–æ–¥—Å–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å VIN-–∫–æ–¥–æ–º {vin_code}."}
            ]
        )
        car_info = response.choices[0].message.content.strip()
        return car_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def extract_vin_from_photo(photo_path):
    try:
        image = Image.open(photo_path)
        text = pytesseract.image_to_string(image)
        vin_code = ''.join(filter(str.isalnum, text)).upper()
        if len(vin_code) >= 17:
            return vin_code[:17]
        else:
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ VIN-–∫–æ–¥–∞: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(telegram_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()
