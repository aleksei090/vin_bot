import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
import openai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')  # OpenAI API-–∫–ª—é—á
telegram_token = os.getenv('TELEGRAM_TOKEN')  # Telegram API-–∫–ª—é—á

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = openai_api_key

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞", callback_data='upload_photo')],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ VIN-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data='enter_vin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'upload_photo':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å VIN-–∫–æ–¥–æ–º.")
    elif query.data == 'enter_vin':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ VIN-–∫–æ–¥–∞
async def handle_text(update: Update, context):
    user_input = update.message.text.strip().lower()

    if len(user_input) == 17:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ VIN-–∫–æ–¥
        vin_code = user_input.upper()
        logger.info(f"VIN-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {vin_code}")
        await update.message.reply_text(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ VIN: {vin_code}...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ –ø–æ VIN
        car_info = await asyncio.to_thread(ask_chatgpt_for_car_info, vin_code)
        if car_info:
            await update.message.reply_text(f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}. –í–µ—Ä–Ω–æ –ª–∏ —ç—Ç–æ? (–¥–∞/–Ω–µ—Ç)")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        await handle_user_requests(user_input, update)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∑–∞–ø—á–∞—Å—Ç—è—Ö
async def handle_user_requests(user_input, update: Update):
    if "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä" in user_input or "—Ñ–∏–ª—å—Ç—Ä" in user_input:
        part_info = await asyncio.to_thread(ask_chatgpt_for_part_info, user_input)
        if part_info:
            await update.message.reply_text(f"–°–æ–≤–µ—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: {part_info}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ VIN –∫–æ–¥—É
def ask_chatgpt_for_car_info(vin_code):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∑–∞–ø—á–∞—Å—Ç—è–º."},
                {"role": "user", "content": f"–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ VIN {vin_code}? –£–∫–∞–∂–∏ –º–∞—Ä–∫—É, –≥–æ–¥ –∏ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –∫—Ä–∞—Ç–∫–æ."}
            ]
        )
        car_info = response.choices[0].message.content.strip()
        return car_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—á–∞—Å—Ç–∏
def ask_chatgpt_for_part_info(part_query):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∑–∞–ø—á–∞—Å—Ç—è–º."},
                {"role": "user", "content": f"–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É: {part_query}. –£–∫–∞–∂–∏ –ª—É—á—à–∏–π –±—Ä–µ–Ω–¥, –æ—Ç–∑—ã–≤—ã –∏ –∞—Ä—Ç–∏–∫—É–ª."}
            ]
        )
        part_info = response.choices[0].message.content.strip()
        return part_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(telegram_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()
