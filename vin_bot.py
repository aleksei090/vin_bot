import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
import openai
from dotenv import load_dotenv
import pytesseract
from PIL import Image

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')  # OpenAI API-–∫–ª—é—á
telegram_token = os.getenv('TELEGRAM_TOKEN')  # Telegram API-–∫–ª—é—á

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = openai_api_key

# –£—Å—Ç–∞–Ω–æ–≤–∏–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞", callback_data='upload_photo')],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ VIN-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data='enter_vin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ VIN-–∫–æ–¥–∞.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'upload_photo':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å VIN-–∫–æ–¥–æ–º.")
    elif query.data == 'enter_vin':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è VIN –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
async def handle_confirmation(update: Update, context):
    user_reply = update.message.text.lower()
    vin_code = context.user_data.get('vin_code', None)
    
    if vin_code:
        if user_reply == "–¥–∞":
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω—É–∂–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å.")
        elif user_reply == "–Ω–µ—Ç":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥.")
        else:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context):
    user_input = update.message.text.lower()

    # –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω VIN –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∑–∞–ø—á–∞—Å—Ç—å
    if 'vin_code' in context.user_data:
        await process_request(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN-–∫–æ–¥–∞
        vin_code = user_input.strip().upper()
        if len(vin_code) == 17:
            car_info = await asyncio.to_thread(get_car_info_by_vin, vin_code)
            if car_info:
                context.user_data['vin_code'] = vin_code
                await update.message.reply_text(
                    f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info['make']} {car_info['model']}, {car_info['year']}, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è {car_info['engine_volume']} –ª. –í–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
                )
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ.")
        else:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photo(update: Update, context):
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"photos/{photo_file.file_id}.jpg"
    os.makedirs('photos', exist_ok=True)
    await photo_file.download_to_drive(photo_path)
    logger.info(f"–§–æ—Ç–æ VIN-–∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    vin_code = await asyncio.to_thread(extract_vin_from_photo, photo_path)

    if vin_code:
        context.user_data['vin_code'] = vin_code
        await update.message.reply_text(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω VIN-–∫–æ–¥: {vin_code}. –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        car_info = await asyncio.to_thread(get_car_info_by_vin, vin_code)
        if car_info:
            await update.message.reply_text(
                f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info['make']} {car_info['model']}, {car_info['year']}, –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è {car_info['engine_volume']} –ª. –í–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
def get_car_info_by_vin(vin_code):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –∑–∞–ø—á–∞—Å—Ç—è–º."},
                {"role": "user", "content": f"–ü–æ–¥—Å–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å VIN-–∫–æ–¥–æ–º {vin_code}."}
            ]
        )
        car_info = response.choices[0].message.content.strip()
        # –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–≤–ª–µ—á—å –Ω—É–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è)
        return {
            "make": "Infiniti",
            "model": "QX56",
            "year": "2004",
            "engine_volume": "5.6"
        }  # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def extract_vin_from_photo(photo_path):
    try:
        image = Image.open(photo_path)
        text = pytesseract.image_to_string(image)
        vin_code = ''.join(filter(str.isalnum, text)).upper()
        if len(vin_code) >= 17:
            return vin_code[:17]
        else:
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ VIN-–∫–æ–¥–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∑–∞–ø—á–∞—Å—Ç–∏
async def process_request(update: Update, context):
    query = update.message.text.lower()
    vin_code = context.user_data.get('vin_code', None)

    if vin_code and '–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä' in query:
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        await update.message.reply_text("–ò—â–µ–º –º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π –∏ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        options = [
            {"name": "–§–∏–ª—å—Ç—Ä 1", "price": "1000 —Ä—É–±", "article": "12345"},
            {"name": "–§–∏–ª—å—Ç—Ä 2", "price": "1500 —Ä—É–±", "article": "67890"},
            {"name": "–§–∏–ª—å—Ç—Ä 3", "price": "2000 —Ä—É–±", "article": "54321"},
            {"name": "–§–∏–ª—å—Ç—Ä 4 (–æ—Ä–∏–≥–∏–Ω–∞–ª)", "price": "3000 —Ä—É–±", "article": "09876"}
        ]
        message = "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n"
        for option in options:
            message += f"{option['name']}, {option['price']}, –∞—Ä—Ç–∏–∫—É–ª: {option['article']}\n"
        
        await update.message.reply_text(message)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞—Ä—Ç–∏–∫—É–ª–∞
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(telegram_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()
