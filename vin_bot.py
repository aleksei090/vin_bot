import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
from dotenv import load_dotenv
import pytesseract
from PIL import Image
from vininfo import Vin
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
telegram_token = os.getenv('TELEGRAM_TOKEN')  # Telegram API-–∫–ª—é—á
prlg_api_key = os.getenv('PRLG_API_KEY')      # API-–∫–ª—é—á pr-lg.ru

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ VIN-–∫–æ–¥–∞", callback_data='upload_photo')],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ VIN-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data='enter_vin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ VIN-–∫–æ–¥–∞.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context):
    query = update.callback_query
    await query.answer()

    if query.data == 'upload_photo':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å VIN-–∫–æ–¥–æ–º.")
    elif query.data == 'enter_vin':
        await query.edit_message_text(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context):
    user_input = update.message.text.strip()

    if 'awaiting_part' in context.user_data and context.user_data['awaiting_part']:
        await handle_part_input(update, context)
        return

    # –ï—Å–ª–∏ VIN-–∫–æ–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∑–∞–ø—á–∞—Å—Ç–∏
    if 'vin_code' in context.user_data:
        if user_input.lower() in ['–¥–∞', '–≤–µ—Ä–Ω–æ']:
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∑–∞–ø—á–∞—Å—Ç–∏."
            )
            context.user_data['awaiting_part'] = True
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥.")
            context.user_data.clear()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN-–∫–æ–¥–∞
    vin_code = user_input.upper()
    if len(vin_code) == 17:
        car_info = await asyncio.to_thread(decode_vin, vin_code)
        if car_info:
            context.user_data['vin_code'] = vin_code
            context.user_data['car_info'] = car_info
            await update.message.reply_text(
                f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}. –í–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –ø–æ VIN-–∫–æ–¥—É.")
    else:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VIN-–∫–æ–¥.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def handle_photo(update: Update, context):
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"photos/{photo_file.file_id}.jpg"
    os.makedirs('photos', exist_ok=True)
    await photo_file.download_to_drive(photo_path)
    logger.info(f"–§–æ—Ç–æ VIN-–∫–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {photo_path}")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    vin_code = await asyncio.to_thread(extract_vin_from_photo, photo_path)

    if vin_code:
        context.user_data['vin_code'] = vin_code
        car_info = await asyncio.to_thread(decode_vin, vin_code)
        if car_info:
            context.user_data['car_info'] = car_info
            await update.message.reply_text(
                f"–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}. –í–µ—Ä–Ω–æ? (–¥–∞/–Ω–µ—Ç)"
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –ø–æ VIN-–∫–æ–¥—É.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è VIN-–∫–æ–¥–∞
def decode_vin(vin_code):
    try:
        vin = Vin(vin_code)
        vin_data = vin.parse()
        car_info = f"{vin_data['manufacturer']} {vin_data['model_year']}"
        return car_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ VIN-–∫–æ–¥–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def extract_vin_from_photo(photo_path):
    try:
        image = Image.open(photo_path)
        text = pytesseract.image_to_string(image)
        vin_code = ''.join(filter(str.isalnum, text)).upper()
        if len(vin_code) == 17:
            return vin_code
        else:
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ VIN-–∫–æ–¥–∞ –∏–∑ —Ñ–æ—Ç–æ: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø—á–∞—Å—Ç–∏
async def process_request(update: Update, context):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∑–∞–ø—á–∞—Å—Ç–∏."
    )
    context.user_data['awaiting_part'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–ø—á–∞—Å—Ç–∏
async def handle_part_input(update: Update, context):
    user_input = update.message.text.strip()
    context.user_data['awaiting_part'] = False

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–ø—á–∞—Å—Ç–∏
    # –ü–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∞—Ä—Ç–∏–∫—É–ª

    article = user_input.upper()
    # –ü–æ–∏—Å–∫ –Ω–∞ pr-lg.ru –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    prlg_data = await asyncio.to_thread(get_prlg_data_by_article, article)
    if prlg_data:
        message = "–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞ pr-lg.ru:\n"
        for item in prlg_data:
            message += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item['description']}, –¶–µ–Ω–∞: {item['price']} —Ä—É–±., –ù–∞–ª–∏—á–∏–µ: {item['quantity']}\n"
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç—å –Ω–∞ pr-lg.ru.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ pr-lg.ru –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
def get_prlg_data_by_article(article):
    api_key = prlg_api_key
    url = f"https://api.pr-lg.ru/search/items?secret={api_key}&article={article}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            prlg_data = response.json()
            return prlg_data.get('data', [])
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API pr-lg.ru: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ pr-lg.ru: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(telegram_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()
